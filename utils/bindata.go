// Code generated by go-bindata.
// sources:
// ../lib/kubecfg.libsonnet
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _libKubecfgLibsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xef\x6f\xdb\x36\x10\xfd\xee\xbf\xe2\xc1\xd8\x07\xbb\x50\xed\xb6\x18\x30\xc0\x43\x81\x79\x6d\x87\xb9\x6b\x9d\xcd\x4e\x57\xe4\x5b\xce\xd4\x49\x62\x4b\x91\x1a\x79\x8a\x63\x0c\xfb\xdf\x07\x52\x52\xfc\x23\x29\x50\x20\x10\x14\xde\xf1\xf1\xbd\x77\xc7\x93\xe7\x73\xbc\x71\xcd\xc1\xeb\xb2\x12\xbc\x7a\xf1\xf2\x27\x5c\x57\x8c\xaf\xed\x8e\x55\x51\x82\x5a\xa9\x9c\x0f\xa3\xf9\xbc\xfb\x03\x80\x0f\x5a\xb1\x0d\x9c\xa3\xb5\x39\x7b\x48\xc5\x58\x36\xa4\x2a\x1e\x22\x19\xfe\x66\x1f\xb4\xb3\x78\x35\x7b\x81\x49\x4c\x18\xf7\xa1\xf1\xf4\xe7\x1e\xe5\xe0\x5a\xd4\x74\x80\x75\x82\x36\x30\xa4\xd2\x01\x85\x36\x0c\xbe\x57\xdc\x08\xb4\x85\x72\x75\x63\x34\x59\xc5\xd8\x6b\xa9\xd2\x51\x3d\xd0\xac\x87\xb9\xe9\x61\xdc\x4e\x48\x5b\x10\x94\x6b\x0e\x70\xc5\x69\x2e\x48\x8e\xec\x81\x4a\xa4\x59\xcc\xe7\xfb\xfd\x7e\x46\x89\xf7\xcc\xf9\x72\x6e\xba\xdc\x30\xff\xb0\x7a\xf3\x6e\xbd\x7d\xf7\xfc\xd5\xec\xc5\x71\xd7\x27\x6b\x38\x04\x78\xfe\xa7\xd5\x9e\x73\xec\x0e\xa0\xa6\x31\x5a\xd1\xce\x30\x0c\xed\xe1\x3c\xa8\xf4\xcc\x39\xc4\x45\xee\x7b\xaf\x45\xdb\x32\x43\x70\x85\xec\xc9\x73\x8f\x94\xeb\x20\x5e\xef\x5a\x39\x33\x70\x60\xaa\xc3\x59\x82\xb3\x20\x8b\xf1\x72\x8b\xd5\x76\x8c\x5f\x97\xdb\xd5\x36\xeb\x71\x3e\xaf\xae\x7f\xbf\xfa\x74\x8d\xcf\xcb\xcd\x66\xb9\xbe\x5e\xbd\xdb\xe2\x6a\x83\x37\x57\xeb\xb7\xab\xeb\xd5\xd5\x7a\x8b\xab\xdf\xb0\x5c\xdf\xe0\x8f\xd5\xfa\x6d\x06\xd6\x52\xb1\x07\xdf\x37\x3e\xea\x70\x1e\x3a\x5a\xcb\xf9\xe0\xe3\x96\xf9\x8c\x48\xe1\x3a\x62\xa1\x61\xa5\x0b\xad\x60\xc8\x96\x2d\x95\x8c\xd2\xdd\xb1\xb7\xda\x96\x68\xd8\xd7\x3a\xc4\x42\x07\x90\xcd\x7b\x24\xa3\x6b\x2d\x24\x69\xf5\x91\xc0\xd9\x68\xf4\xef\x08\x98\xcf\xd1\x90\x0f\xfc\x3e\x38\x3b\xc9\x49\x68\xba\xe8\x16\x42\x4a\xbe\x8d\x4b\xb7\x88\x3e\xd8\x12\x14\x40\xf8\x12\x9c\x45\xee\x54\x5b\xb3\x95\x2c\x1d\x97\x60\x3c\x4b\xeb\x6d\xb7\xcd\x73\x68\x4d\x34\x3d\x65\x5b\x16\xb8\xdd\x17\x56\x32\x1b\xe1\x78\xdc\x62\x81\x20\xf9\xcc\x92\xe8\x3b\x9e\x8c\x1f\xd6\xc7\xd3\x6c\x74\xc2\xec\x86\x6a\x73\xc6\xec\x5b\xc4\x6e\x96\x1f\x3f\xc4\x05\xa6\xfa\x09\x5a\x64\xf1\x8c\xbc\xa7\xc3\xb3\xa1\x27\xbf\x45\x32\xcc\x80\x25\x82\xb6\xa5\xe1\x0e\x23\x21\x0f\x92\xb1\xd7\xc6\x20\x48\x7c\xee\xb8\xc7\xe7\x3c\x71\xb0\x48\x47\x74\x77\xc4\xd9\x7e\x3b\x1b\x8e\x1b\x1f\xc4\x47\x45\x4f\x89\x8f\xeb\x47\xf1\x35\x59\x5d\x70\x90\x54\x99\x3b\x32\x2d\x67\xd0\x36\x67\x2b\xd3\x05\x94\xb3\x77\xec\x25\xe9\x38\x67\x8f\xdb\x94\x7b\xdb\x81\x88\x03\x0d\x26\xb1\x55\x2e\xef\x88\x8e\x1b\xcf\x22\x87\x31\x26\x75\xb4\xe0\xb9\xd1\x96\xa7\x78\xbf\xbd\x5a\x67\x1d\x77\x26\x55\x75\x08\x96\x43\xf2\xc8\xf0\x1d\x9b\x9e\x40\x77\xed\x6e\xbb\x7f\x6e\x11\x1a\x52\x1c\xa2\xbc\x6f\x73\x7e\xfd\xe3\x74\xb1\xc0\x64\x94\xfa\xd2\x29\x32\x28\xf0\xfa\xcc\x82\xd3\xbd\x71\x38\xc5\xcc\xe2\x42\xf8\x08\x78\xe4\x4f\xea\x8f\x94\xf6\x5d\xbe\x24\x4b\x3a\x84\xc7\xbe\x50\x5f\xf6\xf3\x8a\x9f\x2a\x7b\xa2\x76\xa7\xa1\x63\xf9\x38\x28\x6a\x78\x9b\x8e\xd8\x70\xc9\xf7\x93\x30\x5d\xe0\xaf\xd6\x09\xf7\xdd\x57\xf2\x3d\x6a\x16\x52\x15\x79\x52\xc2\x3e\xa0\x70\xad\xcd\xe3\xcc\x4a\x6e\xce\xe7\xe9\x0b\xd0\xf5\x69\x1c\x48\xd4\xef\x92\x8a\xfa\x36\xac\x49\x54\x37\x8d\x9d\xd7\xa5\xb6\x64\x60\xb4\xb0\x27\xd3\xed\x3f\x62\x47\xc0\x47\x9c\x2e\x94\x3c\x8a\x1f\xe5\x78\x0e\xce\xdc\xf1\xaa\xa6\x92\x27\x3a\x3e\x2f\xdc\xce\x9d\xfa\xca\x71\x98\xc5\xc9\xd4\x3b\x5b\x78\x57\x77\xdb\xd3\xf2\x42\xa8\x84\xb6\xa9\x27\x6b\xe7\x4f\x46\x5a\x0a\xff\x92\xeb\x92\x83\x64\xc8\xb9\x61\x9b\x47\x00\x67\x87\xef\x5f\x2f\xc7\xd5\x35\xd9\x1c\xb1\x5f\x51\x18\x2a\x93\xac\x53\x6e\x17\x8a\x4e\x43\xa7\x62\x4a\xbe\xff\x18\xad\x9b\xa4\xd7\xac\x27\x3c\x5d\x60\x33\x4c\x31\xdf\x32\x74\xd1\x1b\xae\x8f\xa5\x39\x6d\x9d\x19\x36\x43\x98\x42\x9a\xe3\xe9\xa2\x73\x2a\x61\xe9\xe2\xa0\xee\x00\x1a\x34\xa4\xbe\x52\xd9\x0f\x84\x49\x73\x90\xca\xd9\xe7\x3a\x54\xd3\x4e\xc0\xc0\xe7\x11\xfd\x21\x70\x41\x7e\xdb\xee\x82\x3c\x90\xf7\x2a\x83\xe7\xc6\x3c\xf0\x3f\x99\x6f\x71\xda\xc5\x18\x29\x6d\xcb\x13\x84\xd4\x65\x5e\x75\xd7\x3d\x26\xcc\x80\x4d\xca\x4b\x1a\x86\x12\xc6\x2f\xba\xb6\xca\xb4\x39\xe3\x87\x97\x19\x58\xd4\xc3\x64\xf1\x5c\xc4\x6f\x8a\x43\x68\x77\xa9\x11\x39\x24\x90\xef\xb3\x64\x18\xf1\xc9\x97\xa7\x2d\x49\x2a\x9f\xb2\x24\x05\x8e\x96\x94\x6c\xd9\x93\xf0\x9f\x14\xc2\xde\xf9\x7c\x62\xd8\x96\x52\x65\xb0\x6d\xfd\x56\x97\x5a\x42\x7a\xdd\x1e\xea\x9d\x33\xf1\xdd\x7d\x6a\x1a\xf6\x19\xc8\x18\xb7\xdf\x70\xc3\x24\x99\x6a\x83\xb8\x21\x67\xba\xe8\x90\x7b\x3b\xe9\xe1\x88\x1c\x4d\x7f\xc8\xf1\x87\x50\xc1\x24\xad\xe7\x30\xf4\x73\x37\x1e\x63\xa4\x21\x4f\x35\x0f\xd7\xef\x92\xe6\x85\xb2\xcb\x70\xd4\xf7\xdf\xe8\xff\x00\x00\x00\xff\xff\xb1\xf1\x66\x22\x16\x0a\x00\x00")

func libKubecfgLibsonnetBytes() ([]byte, error) {
	return bindataRead(
		_libKubecfgLibsonnet,
		"lib/kubecfg.libsonnet",
	)
}

func libKubecfgLibsonnet() (*asset, error) {
	bytes, err := libKubecfgLibsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib/kubecfg.libsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lib/kubecfg.libsonnet": libKubecfgLibsonnet,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lib": &bintree{nil, map[string]*bintree{
		"kubecfg.libsonnet": &bintree{libKubecfgLibsonnet, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

