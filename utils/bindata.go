// Code generated by go-bindata.
// sources:
// ../lib/kubecfg.libsonnet
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _libKubecfgLibsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xef\x6f\xdb\x36\x10\xfd\xee\xbf\xe2\xc1\xd8\x07\xbb\x50\xed\xb6\x18\x30\xc0\x43\x81\x79\x6d\x86\xba\x6b\x93\xce\x4e\x57\xe4\x5b\xce\xd4\x49\x62\x4b\x91\x1a\x79\x8a\x63\x0c\xfb\xdf\x07\x52\x52\xfc\x23\x29\x50\x20\x30\x1c\xde\xf1\xf8\xde\xbb\xe3\xa3\xe7\x73\xbc\x71\xcd\xde\xeb\xb2\x12\xbc\x7a\xf1\xf2\x17\x5c\x57\x8c\x6f\xed\x96\x55\x51\x82\x5a\xa9\x9c\x0f\xa3\xf9\xbc\xfb\x03\x80\x0f\x5a\xb1\x0d\x9c\xa3\xb5\x39\x7b\x48\xc5\x58\x36\xa4\x2a\x1e\x22\x19\xfe\x66\x1f\xb4\xb3\x78\x35\x7b\x81\x49\x4c\x18\xf7\xa1\xf1\xf4\xd7\xbe\xca\xde\xb5\xa8\x69\x0f\xeb\x04\x6d\x60\x48\xa5\x03\x0a\x6d\x18\x7c\xaf\xb8\x11\x68\x0b\xe5\xea\xc6\x68\xb2\x8a\xb1\xd3\x52\xa5\xa3\xfa\x42\xb3\xbe\xcc\x4d\x5f\xc6\x6d\x85\xb4\x05\x41\xb9\x66\x0f\x57\x1c\xe7\x82\xe4\x80\x1e\xa8\x44\x9a\xc5\x7c\xbe\xdb\xed\x66\x94\x70\xcf\x9c\x2f\xe7\xa6\xcb\x0d\xf3\x0f\xab\x37\x17\x97\x9b\x8b\xe7\xaf\x66\x2f\x0e\xbb\x3e\x5b\xc3\x21\xc0\xf3\x3f\xad\xf6\x9c\x63\xbb\x07\x35\x8d\xd1\x8a\xb6\x86\x61\x68\x07\xe7\x41\xa5\x67\xce\x21\x2e\x62\xdf\x79\x2d\xda\x96\x19\x82\x2b\x64\x47\x9e\xfb\x4a\xb9\x0e\xe2\xf5\xb6\x95\x13\x01\x07\xa4\x3a\x9c\x24\x38\x0b\xb2\x18\x2f\x37\x58\x6d\xc6\xf8\x7d\xb9\x59\x6d\xb2\xbe\xce\x97\xd5\xf5\xbb\xab\xcf\xd7\xf8\xb2\x5c\xaf\x97\x97\xd7\xab\x8b\x0d\xae\xd6\x78\x73\x75\xf9\x76\x75\xbd\xba\xba\xdc\xe0\xea\x0f\x2c\x2f\x6f\xf0\xe7\xea\xf2\x6d\x06\xd6\x52\xb1\x07\xdf\x37\x3e\xf2\x70\x1e\x3a\x4a\xcb\xf9\xa0\xe3\x86\xf9\x04\x48\xe1\x3a\x60\xa1\x61\xa5\x0b\xad\x60\xc8\x96\x2d\x95\x8c\xd2\xdd\xb1\xb7\xda\x96\x68\xd8\xd7\x3a\xc4\x46\x07\x90\xcd\xfb\x4a\x46\xd7\x5a\x48\xd2\xea\x23\x82\xb3\xd1\xe8\xdf\x11\x30\x9f\xa3\x21\x1f\xf8\x7d\x70\x76\x92\x93\xd0\x74\xd1\x2d\x84\x94\x7c\x1b\x97\x6e\x11\x75\xb0\x25\x28\x80\xf0\x35\x38\x8b\xdc\xa9\xb6\x66\x2b\x59\x3a\x2e\x95\xf1\x2c\xad\xb7\xdd\x36\xcf\xa1\x35\x51\xf4\x94\x6d\x59\xe0\xb6\x5f\x59\xc9\x6c\x84\xc3\x71\x8b\x05\x82\xe4\x33\x4b\xa2\xef\x78\x32\x7e\x58\x1f\x4f\xb3\xd1\x11\xb2\x1b\xaa\xcd\x09\xb2\xef\x01\xbb\x59\x7e\xfc\x10\x17\x98\xea\x27\x60\x91\xc5\x33\xf2\x9e\xf6\xcf\x86\x99\xfc\x1e\xc8\x30\x03\x96\x08\xda\x96\x86\xbb\x1a\xa9\xf2\x40\x19\x3b\x6d\x0c\x82\xc4\xcf\x2d\xf7\xf5\x39\x4f\x18\x2c\xd2\x11\xdd\x1d\x71\xb6\xdf\xce\x86\xe3\xc6\x07\xf2\x91\xd1\x53\xe4\xe3\xfa\x81\x7c\x4d\x56\x17\x1c\x24\x75\xe6\x8e\x4c\xcb\x19\xb4\xcd\xd9\xca\x74\x01\xe5\xec\x1d\x7b\x49\x3c\x4e\xd1\xe3\x36\xe5\xde\x76\x45\xc4\x81\x06\x91\xd8\x2a\x97\x77\x40\xc7\x8d\x67\x91\xfd\x18\x93\x3a\x4a\xf0\xdc\x68\xcb\x53\xbc\xdf\x5c\x5d\x66\x1d\x76\x26\x55\x75\x15\x2c\x87\xa4\x91\xe1\x3b\x36\x3d\x80\xee\xda\xdd\x76\xff\xdc\x22\x34\xa4\x38\x44\x7a\xdf\xc7\xfc\xfa\xe7\xe9\x62\x81\xc9\x28\xcd\xa5\x53\x64\x50\xe0\xf5\x89\x04\xc7\x7b\xa3\x39\xc5\xcc\xe2\x8c\xf8\x08\x78\xa4\x4f\x9a\x8f\x94\xf6\x43\xba\x24\x49\xba\x0a\x8f\x75\xa1\xbe\xed\xa7\x1d\x3f\x66\xf6\x44\xef\x8e\x43\x87\xf6\x71\x50\xd4\xf0\x26\x1d\xb1\xe6\x92\xef\x27\x61\xba\xc0\x5f\xad\x13\xee\xa7\xaf\xe4\x7b\xd4\x2c\xa4\x2a\xf2\xa4\x84\x7d\x40\xe1\x5a\x9b\x47\xcf\x4a\x6a\xce\xe7\xe9\x05\xe8\xe6\x34\x1a\x12\xf5\xbb\xa4\xa2\x7e\x0c\x6b\x12\xd5\xb9\xb1\xf3\xba\xd4\x96\x0c\x8c\x16\xf6\x64\xba\xfd\x87\xda\xb1\xe0\x23\x4c\x67\x4c\x1e\xc5\x0f\x74\x3c\x07\x67\xee\x78\x55\x53\xc9\x13\x1d\x3f\xcf\xd4\xce\x9d\xfa\xc6\xd1\xcc\xa2\x33\xf5\xca\x16\xde\xd5\xdd\xf6\xb4\xbc\x10\x2a\xa1\x6d\x9a\xc9\xda\xf9\x23\x4b\x4b\xe1\xdf\x72\x5d\x72\x90\x0c\x39\x37\x6c\xf3\x58\xc0\xd9\xe1\xfd\xeb\xe9\xb8\xba\x26\x9b\x23\xce\x2b\x0a\x43\x65\xa2\x75\x8c\xed\x8c\xd1\x71\xe8\x98\x4c\xc9\xf7\x1f\xa3\x74\x93\xf4\x35\xeb\x01\x4f\x17\x58\x0f\x2e\xe6\x5b\x86\x2e\x7a\xc1\xf5\xa1\x35\xc7\xa3\x33\xc3\x7a\x08\x53\x48\x3e\x9e\x2e\x3a\xa7\x16\x96\x2e\x1a\x75\x57\xa0\x41\x43\xea\x1b\x95\xbd\x21\x4c\x9a\xbd\x54\xce\x3e\xd7\xa1\x9a\x76\x04\x06\x3c\x8f\xe0\x0f\x81\x33\xf0\x9b\x76\x1b\xe4\x01\xbc\x57\x19\x3c\x37\xe6\x01\xff\x91\xbf\x45\xb7\x8b\x31\x52\xda\x96\x47\x15\xd2\x94\x79\xd5\x5d\xf7\x98\x30\x03\xd6\x29\x2f\x71\x18\x5a\x18\x5f\x74\x6d\x95\x69\x73\xc6\x4f\x2f\x33\xb0\xa8\x07\x67\xf1\x5c\xc4\x37\xc5\x21\xb4\xdb\x34\x88\x1c\x52\x91\x1f\x93\x64\xb0\xf8\xa4\xcb\xd3\x92\x24\x96\x4f\x49\x92\x02\x07\x49\x4a\xb6\xec\x49\xf8\x13\x85\xb0\x73\x3e\x9f\x18\xb6\xa5\x54\x19\x6c\x5b\xbf\xd5\xa5\x96\x90\xbe\x6e\xf6\xf5\xd6\x99\xf8\xdd\x7d\x6e\x1a\xf6\x19\xc8\x18\xb7\x5b\x73\xc3\x24\x99\x6a\x83\xb8\x21\x67\xba\xe8\x2a\xf7\x72\xd2\xc3\x11\x39\x9a\xfe\x90\xc3\x0f\xa1\x82\x49\x5a\xcf\x61\x98\xe7\xce\x1e\x63\xa4\x21\x4f\x35\x0f\xd7\xef\x1c\xe6\x19\xb3\xf3\xf0\x91\x97\xdc\xb3\xfa\xe4\x5d\xe9\xa9\x9e\x58\xaa\x39\x03\xf9\x32\x59\x53\xc8\x50\x90\x36\x57\xf6\xc2\x7b\xe7\xa7\x0b\x5c\xdc\xb3\x6a\x85\xa3\x57\x34\xdd\x8e\xf8\x14\x0e\xaf\x60\xdf\xba\xc3\x70\x3c\x98\x60\x67\x29\x14\xd2\xaf\x25\x61\x9b\xda\x2a\xb9\x6b\x65\x86\xfe\x68\xd4\x6d\x10\x74\x25\xb6\x1c\xfb\xf9\x69\x79\xfd\x2e\xf9\xca\x01\xdf\xb9\xa3\x1c\x22\x91\xce\x7f\xa3\xff\x03\x00\x00\xff\xff\xed\x1d\x2d\x03\xe5\x0a\x00\x00")

func libKubecfgLibsonnetBytes() ([]byte, error) {
	return bindataRead(
		_libKubecfgLibsonnet,
		"lib/kubecfg.libsonnet",
	)
}

func libKubecfgLibsonnet() (*asset, error) {
	bytes, err := libKubecfgLibsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib/kubecfg.libsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lib/kubecfg.libsonnet": libKubecfgLibsonnet,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lib": &bintree{nil, map[string]*bintree{
		"kubecfg.libsonnet": &bintree{libKubecfgLibsonnet, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

