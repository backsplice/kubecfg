// Code generated by go-bindata.
// sources:
// ../lib/kubecfg.libsonnet
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _libKubecfgLibsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x5d\x8f\xdb\x38\x12\x7c\xf7\xaf\x28\x18\xf7\x60\x07\x8a\x9d\x04\x07\x1c\xe0\x43\x80\xf3\x25\x13\xc4\xd9\x89\x9d\xb5\x9d\x0d\xe6\x6d\xda\x54\x4b\x62\x42\x91\x5a\x92\x1a\xdb\x58\xec\x7f\x5f\x90\x92\x2c\x7f\x4c\x80\x00\x03\x43\xc3\x6e\x16\xab\xab\x5b\x45\x4d\xa7\x78\x67\xaa\xa3\x95\x79\xe1\xf1\xe6\xd5\xeb\xff\x60\x5b\x30\x7e\xd4\x3b\x16\x59\x0e\xaa\x7d\x61\xac\x1b\x4c\xa7\xcd\x1f\x00\xdc\x4b\xc1\xda\x71\x8a\x5a\xa7\x6c\xe1\x0b\xc6\xbc\x22\x51\x70\x17\x49\xf0\x07\x5b\x27\x8d\xc6\x9b\xc9\x2b\x8c\x42\xc2\xb0\x0d\x0d\xc7\xff\x6d\x51\x8e\xa6\x46\x49\x47\x68\xe3\x51\x3b\x86\x2f\xa4\x43\x26\x15\x83\x0f\x82\x2b\x0f\xa9\x21\x4c\x59\x29\x49\x5a\x30\xf6\xd2\x17\xf1\xa8\x16\x68\xd2\xc2\x3c\xb4\x30\x66\xe7\x49\x6a\x10\x84\xa9\x8e\x30\xd9\x79\x2e\xc8\xf7\xec\x81\xc2\xfb\x6a\x36\x9d\xee\xf7\xfb\x09\x45\xde\x13\x63\xf3\xa9\x6a\x72\xdd\xf4\x7e\xf1\xee\x6e\xb9\xb9\x7b\xf9\x66\xf2\xaa\xdf\xf5\x55\x2b\x76\x0e\x96\xff\xac\xa5\xe5\x14\xbb\x23\xa8\xaa\x94\x14\xb4\x53\x0c\x45\x7b\x18\x0b\xca\x2d\x73\x0a\x6f\x02\xf7\xbd\x95\x5e\xea\x3c\x81\x33\x99\xdf\x93\xe5\x16\x29\x95\xce\x5b\xb9\xab\xfd\x85\x80\x1d\x53\xe9\x2e\x12\x8c\x06\x69\x0c\xe7\x1b\x2c\x36\x43\xfc\x7f\xbe\x59\x6c\x92\x16\xe7\xdb\x62\xfb\x71\xf5\x75\x8b\x6f\xf3\xf5\x7a\xbe\xdc\x2e\xee\x36\x58\xad\xf1\x6e\xb5\x7c\xbf\xd8\x2e\x56\xcb\x0d\x56\x1f\x30\x5f\x3e\xe0\xb7\xc5\xf2\x7d\x02\x96\xbe\x60\x0b\x3e\x54\x36\xd4\x61\x2c\x64\x90\x96\xd3\x4e\xc7\x0d\xf3\x05\x91\xcc\x34\xc4\x5c\xc5\x42\x66\x52\x40\x91\xce\x6b\xca\x19\xb9\x79\x62\xab\xa5\xce\x51\xb1\x2d\xa5\x0b\x8d\x76\x20\x9d\xb6\x48\x4a\x96\xd2\x93\x8f\xab\x37\x05\x4e\x06\x83\xbf\x06\xc0\x74\x8a\x8a\xac\xe3\x4f\xce\xe8\x51\x4a\x9e\xc6\xb3\x66\xc1\xc5\xe4\xc7\xb0\xf4\x88\xa0\x83\xce\x41\x0e\x84\xef\xce\x68\xa4\x46\xd4\x25\x6b\x9f\xc4\xe3\x22\x8c\x65\x5f\x5b\xdd\x6c\xb3\xec\x6a\x15\x44\x8f\xd9\x9a\x3d\xcc\xee\x3b\x0b\x3f\x19\xa0\x3f\x6e\x36\x83\xf3\xe9\x44\x93\x97\x4f\x3c\x1a\x9e\xd6\x87\xe3\x64\x70\xc6\xec\x81\x4a\x75\xc1\xec\x67\xc4\x1e\xe6\x9f\xef\xc3\x02\x53\xf9\x0c\x2d\xd2\x78\x41\xd6\xd2\xf1\x45\x37\x93\x3f\x23\xe9\x26\xc0\x1c\x4e\xea\x5c\x71\x83\x11\x91\xbb\x92\xb1\x97\x4a\xc1\xf9\xf0\xbb\xe3\x16\x9f\xd3\xc8\x41\x23\x1e\xd1\xbc\x23\x46\xb7\xdb\x59\x71\xd8\x78\x2a\x3e\x54\xf4\x5c\xf1\x61\xbd\x2f\xbe\x24\x2d\x33\x76\x3e\x76\xe6\x89\x54\xcd\x09\xa4\x4e\x59\xfb\xf1\x0c\xc2\xe8\x27\xb6\x3e\xd6\x71\xc9\x1e\x8f\x31\xf7\xb1\x01\xf1\x06\xd4\x89\xc4\x5a\x98\xb4\x21\x3a\xac\x2c\x7b\x7f\x1c\x62\x54\x06\x09\x5e\x2a\xa9\x79\x8c\x4f\x9b\xd5\x32\x69\xb8\x33\x89\xa2\x41\xd0\xec\xa2\x46\x8a\x9f\x58\xb5\x04\x9a\xd7\xee\xb1\xf9\xe7\x11\xae\x22\xc1\x2e\x94\xf7\x73\xce\x6f\xff\x3d\x9e\xcd\x30\x1a\xc4\xb9\x34\x82\x14\x32\xbc\xbd\x90\xe0\x7c\x6f\x30\xa7\x90\x99\x5d\x15\x3e\x00\x6e\xf4\x89\xf3\x11\xd3\x7e\x49\x97\x28\x49\x83\x70\xab\x0b\xb5\x6d\xbf\xec\xf8\x79\x65\xcf\xf4\xee\x3c\xd4\xb7\x8f\x9d\xa0\x8a\x37\xf1\x88\x35\xe7\x7c\x18\xb9\xf1\x0c\xbf\xd7\xc6\x73\x3b\x7d\x39\x1f\x50\xb2\x27\x51\x90\x25\xe1\xd9\x3a\x64\xa6\xd6\x69\xf0\xac\xa8\xe6\x74\x1a\x6f\x80\x66\x4e\x83\x21\x51\xbb\xcb\x17\xd4\x8e\x61\x49\x5e\x34\x6e\x6c\xac\xcc\xa5\x26\x05\x25\x3d\x5b\x52\xcd\xfe\x1e\x3b\x00\xde\x70\xba\xaa\xe4\x26\xde\x97\x63\xd9\x19\xf5\xc4\x8b\x92\x72\x1e\xc9\xf0\x7b\xa5\x76\x6a\xc4\x0f\x0e\x66\x16\x9c\xa9\x55\x36\xb3\xa6\x6c\xb6\xc7\xe5\x99\xa7\x1c\x52\xc7\x99\x2c\x8d\x3d\xb3\xb4\x18\xfe\x5f\x2a\x73\x76\x3e\x41\xca\x15\xeb\x34\x00\x18\xdd\xdd\x7f\x6d\x39\xa6\x2c\x49\xa7\x08\xf3\x8a\x4c\x51\x1e\xcb\x3a\xe7\x76\x55\xd1\x79\xe8\xbc\x98\x9c\x0f\x9f\x83\x74\xa3\xf8\x98\xb4\x84\xc7\x33\xac\x3b\x17\xb3\x35\x43\x66\xad\xe0\xb2\x6f\xcd\xf9\xe8\x4c\xb0\xee\xc2\xe4\xa2\x8f\xc7\x17\x9d\x63\x0b\x73\x13\x8c\xba\x01\xa8\x50\x91\xf8\x41\x79\x6b\x08\xa3\xea\xe8\x0b\xa3\x5f\x4a\x57\x8c\x9b\x02\x3a\x3e\x37\xf4\xbb\xc0\x15\xf9\x4d\xbd\x73\xfe\x44\xde\x8a\x04\x96\x2b\x75\xe2\x7f\xe6\x6f\xc1\xed\x42\x8c\x84\xd4\xf9\x19\x42\x9c\x32\x2b\x9a\xd7\x3d\x24\x4c\x80\x75\xcc\x8b\x35\x74\x2d\x0c\x37\xba\xd4\x42\xd5\x29\xe3\x5f\xaf\x13\xb0\x17\x27\x67\xb1\x9c\x85\x3b\xc5\xc0\xd5\xbb\x38\x88\xec\x22\xc8\xaf\x49\xd2\x59\x7c\xd4\xe5\x79\x49\x62\x95\xcf\x49\x12\x03\xbd\x24\x39\x6b\xb6\xe4\xf9\x0b\x39\xb7\x37\x36\x1d\x29\xd6\xb9\x2f\x12\xe8\xba\x7c\x2f\x73\xe9\x5d\x7c\xdc\x1c\xcb\x9d\x51\xe1\xd9\x7c\xad\x2a\xb6\x09\x48\x29\xb3\x5f\x73\xc5\xe4\x13\x51\x3b\x6f\xba\x9c\xf1\xac\x41\x6e\xe5\xa4\xd3\x11\x29\xaa\xf6\x90\xfe\x43\x28\x63\xf2\xb5\x65\xd7\xcd\x73\x63\x8f\x21\x52\x91\xa5\x92\xbb\xd7\xef\x9a\xe6\x55\x65\xd7\xe1\x33\x2f\x39\xb0\xf8\x62\x4d\x6e\xa9\x1c\x69\x2a\x39\x01\xd9\x3c\x5a\x93\x4b\x90\x91\x54\x2b\x7d\x67\xad\xb1\xe3\x19\xee\x0e\x2c\x6a\xcf\xc1\x2b\xaa\x66\x47\xb8\x0a\xbb\x5b\xb0\x6d\x5d\x3f\x1c\x27\x13\x6c\x2c\x85\x5c\xfc\x5a\xf2\xac\x63\x5b\x7d\x6a\x6a\x3f\x41\x7b\x34\xca\xda\x79\x34\x10\x3b\x0e\xfd\xfc\x32\xdf\x7e\x8c\xbe\xd2\xf3\xbb\x76\x94\x3e\xd2\x97\xa3\xfd\x47\x72\xc5\x07\x6b\xca\x53\xc3\x3a\x51\x2f\x27\x78\xb9\x1d\xdd\x7f\x1e\xa3\x20\x57\xc4\xcf\x20\x3a\x89\x1f\x4e\xbd\x85\xb9\x3a\xfc\x36\x21\x70\xf8\x7b\xf0\x4f\x00\x00\x00\xff\xff\xaa\x42\x3e\xec\x69\x0b\x00\x00")

func libKubecfgLibsonnetBytes() ([]byte, error) {
	return bindataRead(
		_libKubecfgLibsonnet,
		"lib/kubecfg.libsonnet",
	)
}

func libKubecfgLibsonnet() (*asset, error) {
	bytes, err := libKubecfgLibsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib/kubecfg.libsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lib/kubecfg.libsonnet": libKubecfgLibsonnet,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lib": &bintree{nil, map[string]*bintree{
		"kubecfg.libsonnet": &bintree{libKubecfgLibsonnet, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

