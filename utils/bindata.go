// Code generated by go-bindata.
// sources:
// ../lib/kubecfg.libsonnet
// DO NOT EDIT!

package utils

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _libKubecfgLibsonnet = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xef\x6f\xdb\x36\x10\xfd\xee\xbf\xe2\xc1\xd8\x07\xbb\x50\xed\xb6\x18\x30\xc0\x43\x81\x79\x6d\x87\xb9\x6b\x9d\xcd\x4e\x57\xe4\x5b\xce\xd4\x89\x62\x4b\x91\x1c\x49\xc5\x31\x86\xfd\xef\x03\x29\x29\xfe\x91\x14\x28\x10\x08\x0a\xef\xf8\xf8\xde\xbb\xe3\xc9\xf3\x39\xde\x58\x77\xf0\x4a\xd6\x11\xaf\x5e\xbc\xfc\x09\xd7\x35\xe3\x6b\xbb\x63\x51\x49\x50\x1b\x6b\xeb\xc3\x68\x3e\xef\xfe\x00\xe0\x83\x12\x6c\x02\x97\x68\x4d\xc9\x1e\xb1\x66\x2c\x1d\x89\x9a\x87\x48\x81\xbf\xd9\x07\x65\x0d\x5e\xcd\x5e\x60\x92\x12\xc6\x7d\x68\x3c\xfd\xb9\x47\x39\xd8\x16\x0d\x1d\x60\x6c\x44\x1b\x18\xb1\x56\x01\x95\xd2\x0c\xbe\x17\xec\x22\x94\x81\xb0\x8d\xd3\x8a\x8c\x60\xec\x55\xac\xf3\x51\x3d\xd0\xac\x87\xb9\xe9\x61\xec\x2e\x92\x32\x20\x08\xeb\x0e\xb0\xd5\x69\x2e\x28\x1e\xd9\x03\x75\x8c\x6e\x31\x9f\xef\xf7\xfb\x19\x65\xde\x33\xeb\xe5\x5c\x77\xb9\x61\xfe\x61\xf5\xe6\xdd\x7a\xfb\xee\xf9\xab\xd9\x8b\xe3\xae\x4f\x46\x73\x08\xf0\xfc\x4f\xab\x3c\x97\xd8\x1d\x40\xce\x69\x25\x68\xa7\x19\x9a\xf6\xb0\x1e\x24\x3d\x73\x89\x68\x13\xf7\xbd\x57\x51\x19\x59\x20\xd8\x2a\xee\xc9\x73\x8f\x54\xaa\x10\xbd\xda\xb5\xf1\xcc\xc0\x81\xa9\x0a\x67\x09\xd6\x80\x0c\xc6\xcb\x2d\x56\xdb\x31\x7e\x5d\x6e\x57\xdb\xa2\xc7\xf9\xbc\xba\xfe\xfd\xea\xd3\x35\x3e\x2f\x37\x9b\xe5\xfa\x7a\xf5\x6e\x8b\xab\x0d\xde\x5c\xad\xdf\xae\xae\x57\x57\xeb\x2d\xae\x7e\xc3\x72\x7d\x83\x3f\x56\xeb\xb7\x05\x58\xc5\x9a\x3d\xf8\xde\xf9\xa4\xc3\x7a\xa8\x64\x2d\x97\x83\x8f\x5b\xe6\x33\x22\x95\xed\x88\x05\xc7\x42\x55\x4a\x40\x93\x91\x2d\x49\x86\xb4\x77\xec\x8d\x32\x12\x8e\x7d\xa3\x42\x2a\x74\x00\x99\xb2\x47\xd2\xaa\x51\x91\x62\x5e\x7d\x24\x70\x36\x1a\xfd\x3b\x02\xe6\x73\x38\xf2\x81\xdf\x07\x6b\x26\x25\x45\x9a\x2e\xba\x85\x90\x93\x6f\xd3\xd2\x2d\x92\x0f\x46\x82\x02\x08\x5f\x82\x35\x28\xad\x68\x1b\x36\xb1\xc8\xc7\x65\x18\xcf\xb1\xf5\xa6\xdb\xe6\x39\xb4\x3a\x99\x9e\xb3\x0d\x47\xd8\xdd\x17\x16\x71\x36\xc2\xf1\xb8\xc5\x02\x21\x96\x33\x43\x51\xdd\xf1\x64\xfc\xb0\x3e\x9e\x16\xa3\x13\x66\x37\xd4\xe8\x33\x66\xdf\x22\x76\xb3\xfc\xf8\x21\x2d\x30\x35\x4f\xd0\x22\x83\x67\xe4\x3d\x1d\x9e\x0d\x3d\xf9\x2d\x92\x61\x06\x2c\x11\x94\x91\x9a\x3b\x8c\x8c\x3c\x48\xc6\x5e\x69\x8d\x10\xd3\x73\xc7\x3d\x3e\x97\x99\x83\x41\x3e\xa2\xbb\x23\xd6\xf4\xdb\x59\x73\xda\xf8\x20\x3e\x29\x7a\x4a\x7c\x5a\x3f\x8a\x6f\xc8\xa8\x8a\x43\xcc\x95\xb9\x23\xdd\x72\x01\x65\x4a\x36\x71\xba\x80\xb0\xe6\x8e\x7d\xcc\x3a\xce\xd9\xe3\x36\xe7\xde\x76\x20\xd1\x82\x06\x93\xd8\x08\x5b\x76\x44\xc7\xce\x73\x8c\x87\x31\x26\x4d\xb2\xe0\xb9\x56\x86\xa7\x78\xbf\xbd\x5a\x17\x1d\x77\x26\x51\x77\x08\x86\x43\xf6\x48\xf3\x1d\xeb\x9e\x40\x77\xed\x6e\xbb\x7f\x6e\x11\x1c\x09\x0e\x49\xde\xb7\x39\xbf\xfe\x71\xba\x58\x60\x32\xca\x7d\x69\x05\x69\x54\x78\x7d\x66\xc1\xe9\xde\x34\x9c\x52\x66\x75\x21\x7c\x04\x3c\xf2\x27\xf7\x47\x4e\xfb\x2e\x5f\xb2\x25\x1d\xc2\x63\x5f\xa8\x2f\xfb\x79\xc5\x4f\x95\x3d\x51\xbb\xd3\xd0\xb1\x7c\x1c\x04\x39\xde\xe6\x23\x36\x2c\xf9\x7e\x12\xa6\x0b\xfc\xd5\xda\xc8\x7d\xf7\x49\xbe\x47\xc3\x91\x44\x4d\x9e\x44\x64\x1f\x50\xd9\xd6\x94\x69\x66\x65\x37\xe7\xf3\xfc\x05\xe8\xfa\x34\x0d\x24\xea\x77\xc5\x9a\xfa\x36\x6c\x28\x8a\x6e\x1a\x5b\xaf\xa4\x32\xa4\xa1\x55\x64\x4f\xba\xdb\x7f\xc4\x4e\x80\x8f\x38\x5d\x28\x79\x14\x3f\xca\xf1\x1c\xac\xbe\xe3\x55\x43\x92\x27\x2a\x3d\x2f\xdc\x2e\xad\xf8\xca\x69\x98\xa5\xc9\xd4\x3b\x5b\x79\xdb\x74\xdb\xf3\xf2\x22\x92\x84\x32\xb9\x27\x1b\xeb\x4f\x46\x5a\x0e\xff\x52\x2a\xc9\x21\x16\x28\xd9\xb1\x29\x13\x80\x35\xc3\xf7\xaf\x97\x63\x9b\x86\x4c\x89\xd4\xaf\xa8\x34\xc9\x2c\xeb\x94\xdb\x85\xa2\xd3\xd0\xa9\x18\xc9\xf7\x1f\x93\x75\x93\xfc\x5a\xf4\x84\xa7\x0b\x6c\x86\x29\xe6\x5b\x86\xaa\x7a\xc3\xd5\xb1\x34\xa7\xad\x33\xc3\x66\x08\x53\xc8\x73\x3c\x5f\x74\xce\x25\x94\x36\x0d\xea\x0e\xc0\xc1\x91\xf8\x4a\xb2\x1f\x08\x13\x77\x88\xb5\x35\xcf\x55\xa8\xa7\x9d\x80\x81\xcf\x23\xfa\x43\xe0\x82\xfc\xb6\xdd\x85\xf8\x40\xde\x8b\x02\x9e\x9d\x7e\xe0\x7f\x32\xdf\xd2\xb4\x4b\x31\x12\xca\xc8\x13\x84\xdc\x65\x5e\x74\xd7\x3d\x25\xcc\x80\x4d\xce\xcb\x1a\x86\x12\xa6\x2f\xba\x32\x42\xb7\x25\xe3\x87\x97\x05\x38\x8a\x87\xc9\xe2\xb9\x4a\xdf\x14\x8b\xd0\xee\x72\x23\x72\xc8\x20\xdf\x67\xc9\x30\xe2\xb3\x2f\x4f\x5b\x92\x55\x3e\x65\x49\x0e\x1c\x2d\x91\x6c\xd8\x53\xe4\x3f\x29\x84\xbd\xf5\xe5\x44\xb3\x91\xb1\x2e\x60\xda\xe6\xad\x92\x2a\x86\xfc\xba\x3d\x34\x3b\xab\xd3\xbb\xfd\xe4\x1c\xfb\x02\xa4\xb5\xdd\x6f\xd8\x31\xc5\xe9\xa2\xc3\xea\x0d\xa4\x07\xd0\x12\xae\x87\x3d\xfe\xf4\xa9\x98\x62\xeb\x39\x0c\x1d\xdc\x0d\xc4\x14\x71\xe4\xa9\xe1\xe1\xc2\x5d\x12\xbb\xd0\x72\x19\x4e\x8a\xfe\x1b\xfd\x1f\x00\x00\xff\xff\x18\x32\x42\x96\x08\x0a\x00\x00")

func libKubecfgLibsonnetBytes() ([]byte, error) {
	return bindataRead(
		_libKubecfgLibsonnet,
		"lib/kubecfg.libsonnet",
	)
}

func libKubecfgLibsonnet() (*asset, error) {
	bytes, err := libKubecfgLibsonnetBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "lib/kubecfg.libsonnet", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"lib/kubecfg.libsonnet": libKubecfgLibsonnet,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"lib": &bintree{nil, map[string]*bintree{
		"kubecfg.libsonnet": &bintree{libKubecfgLibsonnet, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

